<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.1.6">Jekyll</generator><link href="http://bblu.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="http://bblu.github.io/" rel="alternate" type="text/html" /><updated>2018-04-01T21:35:38+08:00</updated><id>http://bblu.github.io/</id><title>bblu&#39;s blog</title><subtitle>Just do IT</subtitle><author><name>bblu</name><email>gmwblu@gmail.com</email></author><entry><title>深入计算机图形显示之-接口篇</title><link href="http://bblu.github.io/2018-04-01-cg-card-interface.html" rel="alternate" type="text/html" title="深入计算机图形显示之-接口篇" /><published>2018-04-01T21:12:00+08:00</published><updated>2018-04-01T21:12:00+08:00</updated><id>http://bblu.github.io/cg-card-interface</id><content type="html" xml:base="http://bblu.github.io/2018-04-01-cg-card-interface.html">&lt;blockquote&gt;
  &lt;p&gt;计算机跨时代意义的进步有两个一个是实模式到保护模式，另一个是命令行到GUI。第二个进步和显卡是互相促进的关系，GUI让计算机从科研院所走进了人们的日常生活中。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section&quot;&gt;1.远古时代没有显卡的字符显示方式&lt;/h2&gt;

&lt;h3 id=&quot;bios-int-0x10&quot;&gt;1.1.BIOS INT 0x10&lt;/h3&gt;
&lt;p&gt;在基于x86的计算机BIOS通常在第17中断向量创建了一个中断处理程序提供了实模式下的显示服务。此类服务包括设置显示模式，字符和字符串输出，和在图形模式下的读取和写入像素功能。要使用这个功能的调用，在寄存器AH赋予子功能号，其它的寄存器赋予其它所需的参数，并用指令INT 10H调用。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-asm&quot;&gt;;通过寄存器进行显示控制
;use 0x06 to clear screen
	mov ax, 0x600   ;功能号AH=0x06表示上翻，AL0:清除
	mov bx, 0x700   ;BH设置背景色和前景色
	mov cx, 0		;窗口左上点(0,0)
	mov dx, 0x184f	;窗口右下点(80,25)

	int 0x10        ;触发中断处理准备写入字符
	
;以下向文本模式显存写入 “1 MBR”
;0xA4是样式定义，A:绿色背景闪烁, 4:文字红色
	mov byte [gs:0x00],&#39;1&#39;
	mov byte [gs:0x01],0xA4
	mov byte [gs:0x02],&#39; &#39;
	mov byte [gs:0x03],0xA4
	mov byte [gs:0x04],&#39;M&#39;
	mov byte [gs:0x05],0xA4
	mov byte [gs:0x06],&#39;B&#39;
	mov byte [gs:0x07],0xA4
	mov byte [gs:0x08],&#39;R&#39;
	mov byte [gs:0x09],0xA4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以上示例完整源码:&lt;a href=&quot;https://github.com/bblu/samples/blob/efd0b955f80a57883745130c97f9d1aba1688cbe/os/boot/3mbr.S&quot;&gt;bblu/samples/os/boot/3mbr.S&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;bochs的基本操作&lt;a href=&quot;https://github.com/bblu/samples/blob/efd0b955f80a57883745130c97f9d1aba1688cbe/os/bochs&quot;&gt;bblu/samples/os/bochs&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;1.2.实模式显存地址区间&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;| 起始  | 结束  | 大小| 用途  |
| ------| ----- |---- | :---- |
| C0000 |C7FFF  | 32k |显示适配器BIOS|
| B8000 |BFFFF  | 32k |文本模式显示适配器 |
| B0000  |B7FFF | 32k |黑白显示适配器    |
| A0000  |AFFFF | 64k |彩色显示适配器    |
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;INT 10H的执行速度是相当缓慢的，所以很多程序都绕过这个BIOS例程而直接访问显示硬件。设置显示模式并不经常使用，可以通过BIOS来实现，而一个游戏在屏幕上绘制图形，需要做得很快，所以直接访问显存比用BIOS调用每个像素更适合。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-2&quot;&gt;2.通用和专用图形接口&lt;/h2&gt;

&lt;p&gt;从CPU的角度显卡是外设，从计算机的角度显示器是外设。CPU或者说操作系统要给显卡（GPU）分配任务必须通过接口电路，经典架构的主板有两个集中接口电路控制器一南一北，高速设备比如内存连接在北桥芯片上，南桥芯片连接PCI，USB，SATA等低速设备。&lt;/p&gt;

&lt;h3 id=&quot;pci&quot;&gt;2.1.PCI&lt;/h3&gt;
&lt;p&gt;Peripheral Component Interconnect，翻译成中文是“外围器件互联”，是由PCISIG 推出的一种局部并行总线标准带宽32位频率33MHz。PCI总线标准是1992年制定的由ISA(Industy Standard Architecture)总线发展而来，话说我还亲眼见过ISA接口的声卡的，ISA接口是黑色的PCI是白色的黑白分明。&lt;/p&gt;

&lt;h3 id=&quot;agp&quot;&gt;2.2.AGP&lt;/h3&gt;
&lt;p&gt;Accelerated Graphics
Port加速图形接口，是在1997年由Intel提出为了消除PCI在处理3D图形时的瓶颈，是从PCI标准上创建起来的高速点对点显卡专用传输通道，工作频率66MHz和133MHz两种，主要应用在三维电脑图形的加速上。&lt;/p&gt;

&lt;p&gt;AGP总线直接与主板的北桥芯片相连，且通过该接口让显示芯片与系统主内存直接相连，避免了窄带宽的PCI总线形成的系统瓶颈，增加3D图形数据传输速度，同时在显存不足的情况下还可以调用系统主内存。&lt;/p&gt;

&lt;h3 id=&quot;pci-e&quot;&gt;2.3.PCI-E&lt;/h3&gt;
&lt;p&gt;是由英特尔提出的将全面取代PCI和AGP，最终实现总线标准的统一。它的主要优势就是数据传输速率高，目前最高可达到10GB/s以上。&lt;/p&gt;

&lt;p&gt;PCI-E是通用总线不像AGP是给显卡专用的，APG有点向城市道路中的公交车专用通道别的汽车不能在上边跑而PCIE就是高速公路了从入口进去后就可以敞开跑了。&lt;/p&gt;

&lt;p&gt;不论何种接口，显示适配器/显卡暴露给CPU的都是IO端口和显存，CPU自己计算去填充显存的结果是一样的，只要显存中有可以显示的数据显卡就把他们提交到屏幕上去显示，不一样的是过程中的处理不劳CPU大驾了尤其是三维渲染前的顶点变换、纹理坐标、融合、各种测试都不是cpu的强项，这样有了显卡cpu就轻松许多了。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;参考 &lt;a href=&quot;https://zh.wikipedia.org/wiki/INT_10H&quot;&gt;Wiki: INT 10H&lt;/a&gt;&lt;br /&gt;
《操作系统 真象还原》第三章&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>bblu</name><email>gmwblu@gmail.com</email></author><category term="cg" /><category term="gpu" /><category term="interface" /><summary>计算机跨时代意义的进步有两个一个是实模式到保护模式，另一个是命令行到GUI。第二个进步和显卡是互相促进的关系，GUI让计算机从科研院所走进了人们的日常生活中。</summary></entry><entry><title>ios开发TimePie第6天-Flush UI when Active</title><link href="http://bblu.github.io/2018-03-27-swift-timepie-active.html" rel="alternate" type="text/html" title="ios开发TimePie第6天-Flush UI when Active" /><published>2018-03-27T00:20:00+08:00</published><updated>2018-03-27T00:20:00+08:00</updated><id>http://bblu.github.io/swift-timepie-active</id><content type="html" xml:base="http://bblu.github.io/2018-03-27-swift-timepie-active.html">&lt;blockquote&gt;
  &lt;p&gt;很久没这么连续加班到后半夜的了，真有点吃不消。之前程序计时器后台会停摆唤醒后时间会落后，后台切换到前台需要刷新显示。另外因为目前按照计划自动日程的功能还没实现，加了一个调整上次记录功能是在忘记记录的时候使用的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section&quot;&gt;1.再次唤醒程序刷新页面&lt;/h3&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;NotificationCenter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addObserver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;#selector(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;applicationDidBecomeActive(_:)&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                            &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSNotification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIApplicationDidBecomeActive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                                            &lt;span class=&quot;nv&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;viewWillDisappear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;viewWillDisappear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;NotificationCenter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;removeObserver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;NSNotification&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UIApplicationDidBecomeActive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//print(&quot;removeObserver&quot;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-1&quot;&gt;2.记录调整主要看界面&lt;/h3&gt;
&lt;p&gt;代码就是普通逻辑没什么可看的，点击️【⚙️ 】按钮显示一个返回按钮🔙  和拖动条&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/in-post/2018-03-27-12.23.58-AM.png&quot; alt=&quot;EditLast&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;debug&quot;&gt;3.完善和Debug&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;加入了前台日志在最底下&lt;/li&gt;
  &lt;li&gt;修正选择延时的逻辑BUG：延时没有顺延更新变量。&lt;/li&gt;
  &lt;li&gt;封装了日志接口可以以后扩展输出&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;目前是这样的&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/in-post/2018-03-27-12.15.49-AM.png&quot; alt=&quot;upload&quot; /&gt;&lt;/p&gt;</content><author><name>bblu</name><email>gmwblu@gmail.com</email></author><category term="ios" /><category term="swift" /><summary>很久没这么连续加班到后半夜的了，真有点吃不消。之前程序计时器后台会停摆唤醒后时间会落后，后台切换到前台需要刷新显示。另外因为目前按照计划自动日程的功能还没实现，加了一个调整上次记录功能是在忘记记录的时候使用的。</summary></entry><entry><title>读书笔记-《网络是如何连接的》</title><link href="http://bblu.github.io/2018-03-23-book-network-link.html" rel="alternate" type="text/html" title="读书笔记-《网络是如何连接的》" /><published>2018-03-23T00:10:00+08:00</published><updated>2018-03-23T00:10:00+08:00</updated><id>http://bblu.github.io/book-network-link</id><content type="html" xml:base="http://bblu.github.io/2018-03-23-book-network-link.html">&lt;blockquote&gt;
  &lt;p&gt;以前老是觉得学习什么东西应该由浅入深，一步一步步入深渊。现在感觉好像倒过来也是可行的当然拿到一本书即使看不懂也能坚持看下去才行。主要是网络这块真是如此，最早看计算机网络第五版，云里雾里的那些什么带碰撞检测是载波侦听搞的很狼狈，后来看详解TCP/IP感觉就好一点，这两天看到Kindle里的网络是怎么连接的，终于有山重水复疑无路，柳暗花明又一村的感觉了，把一些知识点和之前的困惑记录一下。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;|网络应用程序（浏览器、foxmail、web服务器）---|
|----------------------------------------|
|---------Socket库------------[DN解析器]--|
|------ [20]TCP----【OS】-----[20]UDP-----|
|[ICMP]-------0x0800:IP----[0x0806:ARP]--|
|----------------网卡驱动程序--------------|
|--------------------网卡-----------------|
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section&quot;&gt;0.浏览器输入网址&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;URL：协议//web服务器/目录/文件&lt;/li&gt;
  &lt;li&gt;HTTP 1.1 Method：HEAD、GET、POST、PUT、DELETE、OPTIONS、TRACE、CONNECT&lt;/li&gt;
  &lt;li&gt;生成HTTP请求消息&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#第一行请求的内容&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;lt;method&amp;gt; &lt;/span&gt;&amp;lt;uri&amp;gt; &amp;lt;HTTP/1.1&amp;gt;
&lt;span class=&quot;c&quot;&gt;#以下是字段名和值&lt;/span&gt;
Authorization：身份认证
Host：服务器IP和端口号
User-Agent：客户端软件信息
Accept：客户端支持的MIME类型
Range：指定获取的数据范围
Connection:是否保持连接
Via：记录途中的代理和网关
&lt;span class=&quot;c&quot;&gt;#空行&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#消息体&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#响应消息第一行 HTTP/1.1 200 OK&lt;/span&gt;
http版本+状态码+响应短语

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;浏览器使用Socket库中的DN解析器(gethostbyname)向DNS发UDP消息查询IP&lt;/li&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;section-1&quot;&gt;域名记录：&lt;/h2&gt;
    &lt;p&gt;|DomainName：|bblu.tk&lt;br /&gt;
|Class：|IN[只剩这一直类型] &lt;br /&gt;
|Type：|Address|MaileXchange&lt;br /&gt;
|Data：|167.211.34.1|10 mail.163.com&lt;br /&gt;
—
ps:网络层依靠ARP协议IP-&amp;gt;MAC&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-2&quot;&gt;2.浏览器交给系统的协议栈&lt;/h2&gt;

&lt;p&gt;socket：程序组件名称&lt;br /&gt;
Socket：系统协议栈库【加州伯克利分校BSD系统c库】&lt;br /&gt;
套接字：管道两端接口&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;IP地址的子网相当于小区，机器号相当于楼号，端口号相当于房间号。一台计算机内有许多网络通信客户端，一个楼内有许多单元房。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;调用socket组件创建套接字，协议栈为这个套接字随机分配一个可用的端口号并返回一个描述符给客户端。&lt;/li&gt;
  &lt;li&gt;调用connect组件（描述符，IP，port）&lt;/li&gt;
  &lt;li&gt;调用Socket库write组件委托系统把消息写入协议栈&lt;/li&gt;
  &lt;li&gt;Socket库中的read程序组件委托系统协议栈接收消息&lt;/li&gt;
  &lt;li&gt;HTTP协议规定web服务器响应完消息后应该主动断开，所以web服务器会首先调用close断开连接。
&amp;gt; 实际收发数据的是协议栈-&amp;gt;网卡驱动-&amp;gt;网卡&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tcpip&quot;&gt;3.[TCP/IP]协议原型是一个后来拆分了&lt;/h2&gt;

&lt;p&gt;TCP负责客户端内，IP负责客户端外&lt;br /&gt;
协议栈通过TCP收发数据：出错重发&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1.创建套接字&lt;/li&gt;
  &lt;li&gt;2.连接服务器&lt;/li&gt;
  &lt;li&gt;3.收发数据&lt;/li&gt;
  &lt;li&gt;4.断开删除套接字&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;协议栈通过UDP收发数据：客户端自己负责&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;3.1套接字的实体就是通信控制信息&lt;/h3&gt;

&lt;p&gt;协议栈是根据套接字记录的控制信息进行工作的
windows使用netstat -ano 查看套接字&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Proto&lt;/td&gt;
      &lt;td&gt;LocalAddress&lt;/td&gt;
      &lt;td&gt;ForeignAddress&lt;/td&gt;
      &lt;td&gt;State&lt;/td&gt;
      &lt;td&gt;PID&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;网络包{[IP][TCP][Data]} &lt;br /&gt;
[A]SYN=1——&amp;gt;[B]  歪歪你是B吗？&lt;br /&gt;
[A]&amp;lt;——ACK=1[B]  嗯嗯我是B你是A吗？&lt;br /&gt;
[A]ACK=1——&amp;gt;[B]  我是A，是这样。。。(开始会话)&lt;/p&gt;

&lt;p&gt;经过三次握手之后的connection从业务角度可以称为session【会话】&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;以太网的MTU&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1500字节，PPPoE有额外的头信息MTU会变小   
1500- 20-20&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1460  
MTU - HEAD &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; MSS【最大分段大小】 

起始帧分界符SFD

|-----帧 -----|以太包--------------|  
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;56b报头/8bSFD][MAC][IP][TCP][Data][32b帧校验FCS]  
|-------------|-IP负责--|  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;IP协议根据IP地址查找包的传输方向，即下一个路由器的位置，接下来委托以太网协议把包传输过去，下一个路由器的MAC地址被写入到MAC头部中去，IP模块给TCP包加了两个头MAC头和IP头，PhysicalLayerDevice（PHY）模块将MAC模块产生的信号转换为可以在网线上传输的格式还有监听有没有信号进来，半双工模式下信号碰撞后终止发送，广播阻塞随机延时后重试。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ARP协议通过广播，对应的终端会回应自己的MAC。ARP缓存一般保存几分钟，刚刚修改IP地址后可能会发生通信异常。&lt;/li&gt;
  &lt;li&gt;以太网报头给了56比特的101010…交替的序列是给接收方同步时钟的网络传输速率就是时钟的频率比如10Mbit/s或者100Mbit/s，从SFD后马上进入工作状态。前面的序列可以理解为idle后面的SFD可以当作是读取指令。&lt;/li&gt;
  &lt;li&gt;发送帧使用集线器的半双工模式或交换机的全双工模式。接收方先用FCS做有效检查再比对MAC地址如果不一致将丢掉，相同就将包放入缓冲区由网卡发起一个中断通知CPU，CPU告诉在对应中断号注册的网卡驱动的中断处理程序去取包进行下一步操作，类型是0x0080的包给TCP/IP协议栈，0x809B的包给AppleTalk的协议栈。&lt;/li&gt;
  &lt;li&gt;进入TCP/IP后如果发现IP地址错误IP模块会通过ICMP消息通知发送方，但是有网络转发功能的服务器会转发包。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
 主要的ICMP消息  
 类型：描述
 0：EchoReply
 3: DestinationUnreachable
 4: Source Quench路由器负载报警
 5: Redirect 包的出入口相同告诉发送方下一个路由让它直接发过去
 8: Echo Ping命令发送的消息，接收方返回一个EchoReply
 11: TimeExeccded 超过IP头部的TTL被丢弃通知发送方
 12:IP头错误被丢弃
&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;IP协议里接收到开启分片的包还要分片重组&lt;/li&gt;
  &lt;li&gt;PromiscuousMode混杂模式下网卡不检查接收方MAC地址照单全收。&lt;/li&gt;
  &lt;li&gt;网络超时就是指指定时间没有收到返回的ACK号。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;尽管我们说IP模块负责将包发给对方，但实际上将包从发送方传输到接收方的工作是由集线器、路由器等网络设备来完成的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;发送数据方会把数据的字节序号+长度一同发给接收方，接收方把字节序号+1设置为ACK应答给发送方，配合滑动窗口ACK可以间隔回应，实际使用为了安全开始传输会给字节序号一个随机数。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ps:Gateway在TCP/IP的世界里就是路由器&lt;/p&gt;

&lt;h2 id=&quot;udp&quot;&gt;4.UDP&lt;/h2&gt;
&lt;p&gt;如果数据很短一个包就能轻松装下就没有必要考虑进度了，出错也就是把一个包重新发一下，代价却比TCP小的多。比如DNS查询，对方的回复就是接收确认。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;UDP可以发送的最大数据是由IP包头的全长字段16b决定的，IP协议包最大长度是65535，再减去20IP+8UDP等于65507，需要IP模块分片传输。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section-4&quot;&gt;5.交换机和路由器的包转发操作&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;实际上路由器中路由表的目标IP地址只需要表示子网部分的比特值就可以了，主机号部分全部为0（也有一些IP地址主机号不是全部为0）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;路由器的端口并不只有以太网一种，不同线路和局域网类型支持的最大包也不同。比如PPPoE协议遇到这种情况，可以使用IP协议中定义的分片功能对包进行拆分，缩短每个包的长度。需要注意的是，这里说的分片和第2章介绍的TCP对数据进行拆分的机制是不同的。TCP拆分数据的操作是在将数据装到包里之前进行的，换句话说，拆分好的一个数据块正好装进一个包里。从IP分片的角度来看，这样一个包其实是一个未拆分的整体，也就是说，分片是对一个完整的包再进行拆分的过程。&lt;/li&gt;
  &lt;li&gt;程序不允许分片或者已经分片的包不能分片。&lt;/li&gt;
  &lt;li&gt;公网地址紧缺后把公网没分配的三个段拿出来当成私有地址&lt;/li&gt;
  &lt;li&gt;10.～ 172.16.～ 192.168.～ ,以太网外网部分分配PublicAddress,内网部分通过地址转换（NAT）机制上网，即在转发包时头部的IP地址和端口号，NAT设备一般是路由器中的16b端口号可以表示65536个值除去前面保留的1024个其余的都可以映射给内网的上网设备。&lt;/li&gt;
&lt;/ul&gt;</content><author><name>bblu</name><email>gmwblu@gmail.com</email></author><category term="network" /><category term="note" /><summary>以前老是觉得学习什么东西应该由浅入深，一步一步步入深渊。现在感觉好像倒过来也是可行的当然拿到一本书即使看不懂也能坚持看下去才行。主要是网络这块真是如此，最早看计算机网络第五版，云里雾里的那些什么带碰撞检测是载波侦听搞的很狼狈，后来看详解TCP/IP感觉就好一点，这两天看到Kindle里的网络是怎么连接的，终于有山重水复疑无路，柳暗花明又一村的感觉了，把一些知识点和之前的困惑记录一下。</summary></entry><entry><title>ios开发TimePie第5天-网络备份数据</title><link href="http://bblu.github.io/2018-03-19-swift-timepie-backup.html" rel="alternate" type="text/html" title="ios开发TimePie第5天-网络备份数据" /><published>2018-03-19T20:22:00+08:00</published><updated>2018-03-19T20:22:00+08:00</updated><id>http://bblu.github.io/swift-timepie-backup</id><content type="html" xml:base="http://bblu.github.io/2018-03-19-swift-timepie-backup.html">&lt;blockquote&gt;
  &lt;p&gt;一个程序最有价值的就是数据了，todo是一个高度结构化的数据放到sqlite是最合适不过的了，存到本地的数据库中还是远远不够的如果手机丢了就废了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;json数据最好的归宿就是mongodb，用mongodb支持最好的就是JavaScript了，所以后台用Express+mongoose+mongodb。至此这个app的核心功能根据配置初始化界面，数据本地存储和网络备份和恢复就完成了，五天时间这个app至少处于可用状态了后面就是按需优化，然后是计划编排然后是统计分析，完成率分成两种一种是根据时间长度的比如每天读书1个小时，严格的检验是晚上9点-10点读书一个小时，这样激励自己不断的向计划靠拢。定一个目标完成后然后给予自己一定的奖励，比如奖励自己一个QC35。&lt;/p&gt;

&lt;h3 id=&quot;jsonencoder&quot;&gt;1.对象编码 JSONEncoder&lt;/h3&gt;
&lt;p&gt;使用JSONEncoder的化开发者要做的工作就是把自己的完事项继承自Encodaable就可以了&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#代码示例&lt;/span&gt;
struct DoneList: Encodable&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;items:[DoneItem]
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
struct DoneItem: Encodable&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;id:Int
    &lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;code:Int      // 3digits support &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;two steps of actions
    ...
    &lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;desc:String
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#从数据初始化&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;d &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; DoneItem&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;id:id, code:code, star:start, stop:stop,span:span, name:name, alia:&lt;span class=&quot;s2&quot;&gt;&quot;alia&quot;&lt;/span&gt;, desc: &lt;span class=&quot;s2&quot;&gt;&quot;desc&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
doneList.append&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;d&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;#两行代码完成需要的编码&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;encoder &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; JSONEncoder&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;json &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; try encoder.encode&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;doneList&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;urlrequest&quot;&gt;2.网络发送 URLRequest&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#模拟器调试的话endpointUrl可以取本地地址&lt;/span&gt;
var request &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; URLRequest&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;url: endpointUrl&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
request.httpMethod &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;POST&quot;&lt;/span&gt;
request.httpBody &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; json
request.addValue&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;application/json&quot;&lt;/span&gt;, forHTTPHeaderField: &lt;span class=&quot;s2&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
request.addValue&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;application/json&quot;&lt;/span&gt;, forHTTPHeaderField: &lt;span class=&quot;s2&quot;&gt;&quot;Accept&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;task &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; URLSession.shared.dataTask&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;with: request&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
task.resume&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section&quot;&gt;3.服务端接收&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;../assets/in-post/2018-03-19-swift-timepie-bkup.png&quot; alt=&quot;received json&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ServerCode:【&lt;a href=&quot;https://github.com/bblu/timepie/tree/master/nodeServer&quot;&gt;nodeServer&lt;/a&gt;】&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;讲真在点击手机backup按钮数据突突的上数据的那一刻还是挺兴奋的&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;../assets/in-post/2018-03-19-swift-timepie-upload.png&quot; alt=&quot;upload&quot; /&gt;&lt;/p&gt;</content><author><name>bblu</name><email>gmwblu@gmail.com</email></author><category term="ios" /><category term="swift" /><summary>一个程序最有价值的就是数据了，todo是一个高度结构化的数据放到sqlite是最合适不过的了，存到本地的数据库中还是远远不够的如果手机丢了就废了。</summary></entry><entry><title>Jmeter 学习笔记之GettingStarted</title><link href="http://bblu.github.io/2018-03-18-jmeter-get-started-1st.html" rel="alternate" type="text/html" title="Jmeter 学习笔记之GettingStarted" /><published>2018-03-18T23:34:00+08:00</published><updated>2018-03-18T23:34:00+08:00</updated><id>http://bblu.github.io/jmeter-get-started-1st</id><content type="html" xml:base="http://bblu.github.io/2018-03-18-jmeter-get-started-1st.html">&lt;blockquote&gt;
  &lt;p&gt;Apache JMeter 一个测试web功能和性能的开源Java软件，对java框架和协议支持良好，基本上应用协议都能测试。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;先上图安装完后长这个样子，看了一下这货我的感想是这个东西是纯程序员思维的产品，肯定没有和测试商量去问他们的需求就开发出来的东西，随着开发向运维和测试侵入的大趋势以后这种程序友好产品会越来越多的，GUI的工作原理相当于把测试程序编排可视化，当然也可以直接写程序啦。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/in-post/2018-03-18-jmeter-get-started-1.png&quot; alt=&quot;JmeterMainView&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Web - HTTP, HTTPS (Java, NodeJS, PHP, ASP.NET, …)&lt;/li&gt;
  &lt;li&gt;SOAP / REST Webservices&lt;/li&gt;
  &lt;li&gt;FTP&lt;/li&gt;
  &lt;li&gt;Database via JDBC&lt;/li&gt;
  &lt;li&gt;LDAP&lt;/li&gt;
  &lt;li&gt;Message-oriented middleware (MOM) via JMS&lt;/li&gt;
  &lt;li&gt;Mail - SMTP(S), POP3(S) and IMAP(S)&lt;/li&gt;
  &lt;li&gt;Native commands or shell scripts&lt;/li&gt;
  &lt;li&gt;TCP&lt;/li&gt;
  &lt;li&gt;Java Objects&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;支持浏览器或程序界面录制测试用例或者命令行模式工作，生成动态页面报告。&lt;/p&gt;

&lt;h2 id=&quot;testplan&quot;&gt;TestPlan的节点&lt;/h2&gt;
&lt;p&gt;JMeter的TestPlan对应的应该是TestSuit，它下面节点的介绍，注意的是这些不同类型的节点可以互相嵌套的。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Thread group： the beginning points of any test plan.&lt;/li&gt;
  &lt;li&gt;Controller：控制器节点可以组合嵌套实现流程控制像程序语言到控制语句，有下面三种类型。&lt;/li&gt;
  &lt;li&gt;Samplers:功能和它名字一样触发服务测试&lt;/li&gt;
  &lt;li&gt;LogicControllers:逻辑控制比如对应登录操作只执行一遍&lt;/li&gt;
  &lt;li&gt;TestFraments：当前TreadGroup的别名供其他group引用做到复用的特殊控制节点&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;../assets/in-post/2018-03-18-jmeter-get-started-2.png&quot; alt=&quot;JmeterMainView&quot; /&gt;&lt;/p&gt;</content><author><name>bblu</name><email>gmwblu@gmail.com</email></author><category term="test" /><category term="jmeter" /><summary>Apache JMeter 一个测试web功能和性能的开源Java软件，对java框架和协议支持良好，基本上应用协议都能测试。</summary></entry><entry><title>ios开发TimePie第4天-数据入Sqlite库</title><link href="http://bblu.github.io/2018-03-18-swift-timepie-sqlite.html" rel="alternate" type="text/html" title="ios开发TimePie第4天-数据入Sqlite库" /><published>2018-03-18T11:22:00+08:00</published><updated>2018-03-18T11:22:00+08:00</updated><id>http://bblu.github.io/swift-timepie-sqlite</id><content type="html" xml:base="http://bblu.github.io/2018-03-18-swift-timepie-sqlite.html">&lt;blockquote&gt;
  &lt;p&gt;一个程序最有价值的就是数据了，todo是一个高度结构化的数据放到sqlite是最合适不过的了，以后往android上移植也很方便，搜索了几个包装Sqlite的库都比较恐怖比如Sqlite.swift，介于这个应用的数据逻辑很简单就自己封装了一下sqlite的操作，这里又一个小trick就是选择不同的todo切换。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section&quot;&gt;引用依赖库&lt;/h3&gt;
&lt;p&gt;在项目 General/Linked Frameworks and Libraries/+ 添加libSqlite3.tbd&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;如果想让sqlite3库随版本更新可以考虑使用libsqlite3.0.tbd&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section-1&quot;&gt;常用的操作&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;注释： Command + /&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-2&quot;&gt;封装插入方法&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;二进制数据你去bind我还能理解，感觉sqlite没那么麻烦int和string竟然还需要bind，应该能修改的第一个版本先这样吧。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    func insert&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;item:TodoItem, start:Int, span:Int&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        var stmt: OpaquePointer?
        
        &lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;queryString &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;INSERT INTO Done (code, name, start,end,span) VALUES (?,?,?,strftime(&#39;%s&#39;,&#39;now&#39;),?)&quot;&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;sqlite3_prepare&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;db, queryString, -1, &amp;amp;stmt, nil&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; !&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; SQLITE_OK&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;errmsg &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; String&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;cString: sqlite3_errmsg&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;db&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;!&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            print&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;error preparing insert: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;errmsg)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;sqlite3_bind_int&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;stmt, 1, Int32&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;item.code&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; !&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; SQLITE_OK&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;errmsg &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; String&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;cString: sqlite3_errmsg&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;db&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;!&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            print&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;failure binding code: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;errmsg)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;sqlite3_bind_text&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;stmt, 2, item.name, -1, nil&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; !&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; SQLITE_OK&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;errmsg &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; String&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;cString: sqlite3_errmsg&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;db&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;!&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            print&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;failure binding name: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;errmsg)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;sqlite3_bind_int&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;stmt, 3, Int32&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;start&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; !&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; SQLITE_OK&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;errmsg &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; String&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;cString: sqlite3_errmsg&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;db&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;!&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            print&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;failure binding start: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;errmsg)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;sqlite3_bind_int&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;stmt, 4, Int32&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;span&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; !&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; SQLITE_OK&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;errmsg &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; String&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;cString: sqlite3_errmsg&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;db&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;!&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            print&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;failure binding span: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;errmsg)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        
        &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;sqlite3_step&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;stmt&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; !&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; SQLITE_DONE &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;errmsg &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; String&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;cString: sqlite3_errmsg&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;db&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;!&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            print&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;failure inserting todo: &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;errmsg)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        print&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;itme saved successfully&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;view code:【&lt;a href=&quot;https://github.com/bblu/timepie/blob/e819a589dad15a79648b0375ff94665cb68a8cd4/TimePie/SqliteUtil.swift&quot;&gt;sqliteutil.swift&lt;/a&gt;】&lt;/p&gt;</content><author><name>bblu</name><email>gmwblu@gmail.com</email></author><category term="ios" /><category term="swift" /><summary>一个程序最有价值的就是数据了，todo是一个高度结构化的数据放到sqlite是最合适不过的了，以后往android上移植也很方便，搜索了几个包装Sqlite的库都比较恐怖比如Sqlite.swift，介于这个应用的数据逻辑很简单就自己封装了一下sqlite的操作，这里又一个小trick就是选择不同的todo切换。</summary></entry><entry><title>简介设计模式-适配器模式</title><link href="http://bblu.github.io/2018-03-14-design-pattern-adepter.html" rel="alternate" type="text/html" title="简介设计模式-适配器模式" /><published>2018-03-14T01:17:00+08:00</published><updated>2018-03-14T01:17:00+08:00</updated><id>http://bblu.github.io/design-pattern-adepter</id><content type="html" xml:base="http://bblu.github.io/2018-03-14-design-pattern-adepter.html">&lt;blockquote&gt;
  &lt;p&gt;设计模式（Pattern）是用来解决常见的模式化的问题，这些问题有普遍的应用场景于是就这些场景的共同点提取出有针对性的解决方案。设计模式的位置在架构（architecture）之下，架构面向的是系统的整体，比如分层，模块化，MVC，OOA等等这些都属于架构模式，能放到一起的概念还有个编程语言范式(paradigm)像泛型，OOP等,它们都是在语言之上的技术。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section&quot;&gt;适配器模式&lt;/h3&gt;
&lt;p&gt;日常最常见的适配器的例子就是各种电源适配器，手机是低压电器（5v，直流），接到市电（220V，交流）直接就给爆了，为了解决这个电源接口不匹配的问题于是厂商就生产了电源适配器，通过适配器的适配手机就能获得它需要的充电服务了。
类似的还有厨房倒油的漏斗为了适配不同容器口径不一致的问题，还有管道上的变径也是一样的，冲击钻通过一个和冲击钻头底座适配的夹头就可以安装普通钻头使用了。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;维基百科&lt;/h3&gt;
&lt;p&gt;在设计模式中，适配器模式（英语：adapter pattern）有时候也称包装样式或者包装(wrapper)。将一个类的接口转接成用户所期待的。一个适配使得因接口不兼容而不能在一起工作的类能在一起工作，做法是将类自己的接口包裹在一个已存在的类中。&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;有两种类型的适配器模式：&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;对象适配器模式
在这种适配器模式中，适配器容纳一个它包裹的类的实例。在这种情况下，适配器调用被包裹对象的物理实体。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;类适配器模式
这种适配器模式下，适配器继承自已实现的类（一般多重继承）。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;详见&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F&quot;&gt;维基百科&lt;/a&gt;&lt;/p&gt;</content><author><name>bblu</name><email>gmwblu@gmail.com</email></author><category term="design" /><summary>设计模式（Pattern）是用来解决常见的模式化的问题，这些问题有普遍的应用场景于是就这些场景的共同点提取出有针对性的解决方案。设计模式的位置在架构（architecture）之下，架构面向的是系统的整体，比如分层，模块化，MVC，OOA等等这些都属于架构模式，能放到一起的概念还有个编程语言范式(paradigm)像泛型，OOP等,它们都是在语言之上的技术。</summary></entry><entry><title>简介设计模式-工厂模式</title><link href="http://bblu.github.io/2018-03-14-design-pattern-factory.html" rel="alternate" type="text/html" title="简介设计模式-工厂模式" /><published>2018-03-14T00:20:00+08:00</published><updated>2018-03-14T00:20:00+08:00</updated><id>http://bblu.github.io/design-pattern-factory</id><content type="html" xml:base="http://bblu.github.io/2018-03-14-design-pattern-factory.html">&lt;blockquote&gt;
  &lt;p&gt;设计模式是用来解决常见的模式化的问题，这些问题有普遍的应用场景于是就这些场景的共同点提取出有针对性的解决方案。设计模式的位置在架构之下，架构面向的是系统的整体，比如分层，模块化，MVC，OO等等这些都属于架构模式。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section&quot;&gt;工厂模式&lt;/h2&gt;
&lt;p&gt;工厂就是用来创建产品的。工厂模式分为简单工厂和抽象工厂两种，他们有几个不同点：一是简单工厂是个能直接用的工厂可以生产出实例，抽象工厂只是工厂模板不能用来创建实例。二是简单工厂隐藏来创建细节方便用户使用，抽象工厂把创建的细节交给用户去实现，实例是系统在使用。三抽象工厂不简单。抽象工厂是产品的创建的行为约束的模板(参考C++的模板类比如std::map)但不能直接用，必须根据模板创建出自己的工厂实例（比如std::map&amp;lt;int,string&amp;gt;）就可以用了）。抽象工厂是把产品设计和产品创建分离。这个过程像生产手机，设计部门关注的是结果，生产部门关注的是过程，设计部门不需要了解手机制造的细节，生产部门实现来这些技术细节。&lt;/p&gt;

&lt;p&gt;抽象工厂需要系统架构支持，适用于有大量不同对象有统一行为但是创建方式不同的场景，同样的参数产生的对象是不一样的。比如参数化建模系统中，shapeFactory有CircleFactory和RectFactory两个实现，同样的参数1被这两个工厂调用createShape去创建产品，circleFactory创建的是单位圆，而RectFactory创建的是单位矩形。虽然创建的细节不一样但是把它们扔到画板中它们的旋转，移动，缩放、设置颜色线宽等等接口都是统一的，这些shape创建后是系统在操作他们。&lt;/p&gt;

&lt;p&gt;ps：我一直不把C++的模板技术当作泛型编程，原因就是函数模版像宏的进化版，模版类是抽象的虽然从模版的角度看的确是做到了泛型，但是这个泛型的模版并不能直接去用必须靠程序员手动具型到一个具体类型去用，和动态泛型还有差距算是泛型的低级形态吧。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;维基百科-抽象工厂&lt;/h3&gt;
&lt;p&gt;抽象工厂模式（英语：Abstract factory pattern）是一种软件开发设计模式。抽象工厂模式提供了一种方式，可以将一组具有同一主题的单独的工厂封装起来。在正常使用中，客户端程序需要创建抽象工厂的具体实现，然后使用抽象工厂作为接口来创建这一主题的具体对象。客户端程序不需要知道（或关心）它从这些内部的工厂方法中获得对象的具体类型，因为客户端程序仅使用这些对象的通用接口。抽象工厂模式将一组对象的实现细节与他们的一般使用分离开来。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;如图抽象工厂需要配合系统的抽象产品一起用&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;../assets/in-post/2018-03-14-Abstract_factory.svg&quot; alt=&quot;AbstractFactory&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&quot;
Provide an interface for creating families of related or dependent
objects without specifying their concrete classes.
&quot;&quot;&quot;&lt;/span&gt;

import abc

class AbstractFactory&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;metaclass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;abc.ABCMeta&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
    &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&quot;
    Declare an interface for operations that create abstract product
    objects.
    &quot;&quot;&quot;&lt;/span&gt;

    @abc.abstractmethod
    def create_product_a&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
        pass

    @abc.abstractmethod
    def create_product_b&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
        pass


class ConcreteFactory1&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;AbstractFactory&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
    &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&quot;
    Implement the operations to create concrete product objects.
    &quot;&quot;&quot;&lt;/span&gt;

    def create_product_a&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
        &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;ConcreteProductA1&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

    def create_product_b&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
        &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;ConcreteProductB1&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;


class ConcreteFactory2&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;AbstractFactory&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
    &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&quot;
    Implement the operations to create concrete product objects.
    &quot;&quot;&quot;&lt;/span&gt;

    def create_product_a&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
        &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;ConcreteProductA2&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

    def create_product_b&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
        &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;ConcreteProductB2&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;


class AbstractProductA&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;metaclass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;abc.ABCMeta&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
    &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&quot;
    Declare an interface for a type of product object.
    &quot;&quot;&quot;&lt;/span&gt;

    @abc.abstractmethod
    def interface_a&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
        pass


class ConcreteProductA1&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;AbstractProductA&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
    &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&quot;
    Define a product object to be created by the corresponding concrete
    factory.
    Implement the AbstractProduct interface.
    &quot;&quot;&quot;&lt;/span&gt;

    def interface_a&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
        pass


class ConcreteProductA2&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;AbstractProductA&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
    &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&quot;
    Define a product object to be created by the corresponding concrete
    factory.
    Implement the AbstractProduct interface.
    &quot;&quot;&quot;&lt;/span&gt;

    def interface_a&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
        pass


class AbstractProductB&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;metaclass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;abc.ABCMeta&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
    &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&quot;
    Declare an interface for a type of product object.
    &quot;&quot;&quot;&lt;/span&gt;

    @abc.abstractmethod
    def interface_b&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
        pass


class ConcreteProductB1&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;AbstractProductB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
    &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&quot;
    Define a product object to be created by the corresponding concrete
    factory.
    Implement the AbstractProduct interface.
    &quot;&quot;&quot;&lt;/span&gt;

    def interface_b&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
        pass


class ConcreteProductB2&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;AbstractProductB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
    &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&quot;
    Define a product object to be created by the corresponding concrete
    factory.
    Implement the AbstractProduct interface.
    &quot;&quot;&quot;&lt;/span&gt;

    def interface_b&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;self&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
        pass


def main&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;:
    &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;factory &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ConcreteFactory1&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;, ConcreteFactory2&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;:
        product_a &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; factory.create_product_a&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        product_b &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; factory.create_product_b&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        product_a.interface_a&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        product_b.interface_b&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;__name__ &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;__main__&quot;&lt;/span&gt;:
    main&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Code above:&lt;a href=&quot;https://sourcemaking.com/design_patterns/abstract_factory/python/1&quot;&gt;Abstract Factory in Python&lt;/a&gt;&lt;/p&gt;</content><author><name>bblu</name><email>gmwblu@gmail.com</email></author><category term="design" /><summary>设计模式是用来解决常见的模式化的问题，这些问题有普遍的应用场景于是就这些场景的共同点提取出有针对性的解决方案。设计模式的位置在架构之下，架构面向的是系统的整体，比如分层，模块化，MVC，OO等等这些都属于架构模式。</summary></entry><entry><title>ios开发TimePie第3天-添加UIPickerView</title><link href="http://bblu.github.io/2018-03-11-swift-timepie-3rd.html" rel="alternate" type="text/html" title="ios开发TimePie第3天-添加UIPickerView" /><published>2018-03-11T00:00:00+08:00</published><updated>2018-03-11T00:00:00+08:00</updated><id>http://bblu.github.io/swift-timepie-3rd</id><content type="html" xml:base="http://bblu.github.io/2018-03-11-swift-timepie-3rd.html">&lt;blockquote&gt;
  &lt;p&gt;解析json初始化pickerview选择todo事项，一开始想把Picker的Datasource和Delegate独立出去，互相操作起来太复杂先放弃了以后再说吧。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section&quot;&gt;常用的操作&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;重构： Command + click 可以调出选项转到定义&lt;/li&gt;
  &lt;li&gt;查找： Command + F&lt;/li&gt;
  &lt;li&gt;替换： Command + Option+F&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;uipickerview&quot;&gt;UIPickerView更新选项和设置默认项&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    public func pickerView&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;_ pickerView: UIPickerView, didSelectRow row: Int, inComponent component: Int&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;select0 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; picker.selectedRow&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;inComponent: 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        var index &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; select0 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 100 + component &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; row
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            picker.reloadComponent&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; //重新加载二级选项
            picker.selectRow&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1, inComponent: 1, animated: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; //二级选项里默认的索引是1
            index +&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        print&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pickerView.delegate.didSelectRow[select0=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;select0),com=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;component),row=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;row)],index=&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;index)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        curLabel.text &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;current is &quot;&lt;/span&gt; + getLabel&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;index:index&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;../assets/in-post/2018-03-11-swift-timepie-picker.png&quot; alt=&quot;add source file to project&quot; /&gt;&lt;/p&gt;</content><author><name>bblu</name><email>gmwblu@gmail.com</email></author><category term="ios" /><category term="swift" /><summary>解析json初始化pickerview选择todo事项，一开始想把Picker的Datasource和Delegate独立出去，互相操作起来太复杂先放弃了以后再说吧。</summary></entry><entry><title>ios开发TimePie第2天-解析json添加按钮</title><link href="http://bblu.github.io/2018-03-09-swift-timepie-2nd.html" rel="alternate" type="text/html" title="ios开发TimePie第2天-解析json添加按钮" /><published>2018-03-09T00:00:00+08:00</published><updated>2018-03-09T00:00:00+08:00</updated><id>http://bblu.github.io/swift-timepie-2nd</id><content type="html" xml:base="http://bblu.github.io/2018-03-09-swift-timepie-2nd.html">&lt;blockquote&gt;
  &lt;p&gt;被锤子打击之后就没怎么去写日程了，除了失望另一个很重要的原因是直接在Google日历上无论是添加计划还是修改计划都太麻烦，为自己又不是能完全按照时间计划去执行的人，也没有那么多时间去搞了。那就换手机了，在苹果应用市场上搜集了十几款时间日程管理的软件发现都不是我想要的，于是就想自己开发一个这就是我开发这个软件的原因。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最早起名叫Myday感觉太土了这次重新做改名叫TimePie，github单独起了一个【&lt;a href=&quot;https://github.com/bblu/timepie&quot;&gt;TimePie&lt;/a&gt;】。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;各种白痴问题&lt;/h2&gt;
&lt;p&gt;### 1.添加按钮事件
这个以前都是有鼠标的，这次出差没带鼠标单击了半天就是不能把按钮关联到事件创建上，一晚上也无解直到第二天才恍然大悟应该是右击。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;2.添加资源文件&lt;/h3&gt;
&lt;p&gt;资源文件的结构要和解码的结构对应
&lt;code class=&quot;highlighter-rouge&quot;&gt;base
{
    &quot;user&quot;:&quot;bblu&quot;,
    &quot;date&quot;:&quot;2018-03-09&quot;,
    &quot;items&quot;:[
             {&quot;name&quot;: &quot;work&quot;,&quot;alias&quot;:&quot;工作&quot;,&quot;icon&quot;:&quot;📌&quot;,&quot;code&quot;:0,&quot;span&quot;:360},
             {&quot;name&quot;: &quot;coding&quot;,&quot;alias&quot;:&quot;编码&quot;,&quot;icon&quot;:&quot;👨🏻‍💻&quot;,&quot;code&quot;:1,&quot;span&quot;:60}
    ]
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;写好json的配置文件放到对应目录下,找的代码这么也读不出来，反复看视频和查资料发现是自己白痴了！
解决方法：打开build Phases中的 copy Bundle Resources点击下面的+把你需求的文件添加进去，然后再运行就可以获取到你的文件路径了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../assets/in-post/2018-03-09-swift-json-file.png&quot; alt=&quot;add source file to project&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;swift-4codable&quot;&gt;3.swift 4新增的codable方式定义自己的数据模式&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct TodoConfig:Decodable&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;user:String
    &lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;date:String
    &lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;items:[TodoItem]
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

struct TodoItem: Decodable&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;name:String
    &lt;span class=&quot;nb&quot;&gt;let alias&lt;/span&gt;:String
    &lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;icon:String
    &lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;code:Int
    var span:Int
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;### 4.通过代码初始化按钮&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    func addButtons&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;items:[TodoItem]&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;item &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;items&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;pos &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; item.code
            //pos:   0,  1,  2,  3,  4
            //     100,101,102,103,104
            &lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;px &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;pos % 10&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 80
            &lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;py &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 400 + &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;pos / 10&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 50
            &lt;span class=&quot;nb&quot;&gt;let &lt;/span&gt;btnItem &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; UIButton&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;frame: CGRect&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;x:px, y: py, width: 80, height: 30&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
            //btnItem.addTarget&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;self, action: Selector&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;clickItem&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, 
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;: UIControlEvents.touchUpInside&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            btnItem.translatesAutoresizingMaskIntoConstraints &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false
            &lt;/span&gt;btnItem.setTitle&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;item.alias, &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;: UIControlState.normal&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            btnItem.setTitleColor&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;UIColor.blue, &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;: UIControlState.normal&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            //btnItem.backgroundColor &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; UIColor.lightGray
            // btnItem.addTarget&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;self, action: Selector&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;clickItem&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, 
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;: UIControlEvents.touchUpInside&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            self.view.addSubview&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;btnItem&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;../assets/in-post/2018-03-09-swift-timepie-btn.png&quot; alt=&quot;add source file to project&quot; /&gt;&lt;/p&gt;</content><author><name>bblu</name><email>gmwblu@gmail.com</email></author><category term="ios" /><category term="swift" /><summary>被锤子打击之后就没怎么去写日程了，除了失望另一个很重要的原因是直接在Google日历上无论是添加计划还是修改计划都太麻烦，为自己又不是能完全按照时间计划去执行的人，也没有那么多时间去搞了。那就换手机了，在苹果应用市场上搜集了十几款时间日程管理的软件发现都不是我想要的，于是就想自己开发一个这就是我开发这个软件的原因。</summary></entry></feed>
